Algorithms always terminate. We explain the distinction between existing algorithms (i.e. algorithms
whose existence is provable in ZFC) and known algorithms (i.e. algorithms whose definition is constructive
and currently known). Assuming that the infiniteness of a set X \subseteq N is false or unproven,
we define which elements of X are classified as known. No known set X \subseteq N satisfies Conditions
(1)-(4) and is widely known in number theory or naturally defined, where this term has only informal
meaning. *** (1) A known algorithm with no input returns an integer n satisfying card(X)<\omega
==> X \subseteq (-\infty,n]. (2) A known algorithm for every k \in N decides whether or not k \in X.
(3) No known algorithm with no input returns the logical value of the statement card(X) = \omega.
(4) There are many elements of X and it is conjectured, though so far unproven, that X is infinite.
(5) X is naturally defined. The infiniteness of X is false or unproven. X has the simplest definition
among known sets Y \subseteq N with the same set of known elements. *** We define a set X \subseteq N
which satisfies Conditions (1)-(5) except the requirement that X is naturally defined. Let P(n^2+1)
denote the set of primes of the form n^2+1. We present a new heuristic argument for the infiniteness
of P(n^2+1). Conditions (2)-(5) hold for X=P(n^2+1). We discuss a conjecture which implies the
conjunction of Conditions (1)-(5) for X=P(n^2+1). No set X \subseteq N will satisfy Conditions
(1)-(4) forever, if for every algorithm with no input, at some future day, a computer will be able
to execute this algorithm in 1 second or less. The physical limits of computation disprove this assumption.
We present a table that shows satisfiable conjunctions consisting of Conditions (1)-(5) and their
negations. 