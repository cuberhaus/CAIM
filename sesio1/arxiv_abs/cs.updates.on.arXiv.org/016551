Both logic programming in general, and Prolog in particular, have a long and fascinating history,
intermingled with that of many disciplines they inherited from or catalyzed. A large body of research
has been gathered over the last 50 years, supported by many Prolog implementations. Many implementations
are still actively developed, while new ones keep appearing. Often, the features added by different
systems were motivated by the interdisciplinary needs of programmers and implementors, yielding
systems that, while sharing the "classic" core language, and, in particular, the main aspects of
the ISO-Prolog standard, also depart from each other in other aspects. This obviously poses challenges
for code portability. The field has also inspired many related, but quite different languages that
have created their own communities. This article aims at integrating and applying the main lessons
learned in the process of evolution of Prolog. It is structured into three major parts. Firstly,
we overview the evolution of Prolog systems and the community approximately up to the ISO standard,
considering both the main historic developments and the motivations behind several Prolog implementations,
as well as other logic programming languages influenced by Prolog. Then, we discuss the Prolog implementations
that are most active after the appearance of the standard: their visions, goals, commonalities,
and incompatibilities. Finally, we perform a SWOT analysis in order to better identify the potential
of Prolog, and propose future directions along which Prolog might continue to add useful features,
interfaces, libraries, and tools, while at the same time improving compatibility between implementations.
Under consideration in Theory and Practice of Logic Programming (TPLP) 