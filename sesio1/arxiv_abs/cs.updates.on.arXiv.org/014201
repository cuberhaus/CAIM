Answer set programming (ASP) is an efficient problem-solving approach, which has been strongly
supported both scientifically and technologically by several solvers, ongoing active research,
and implementations in many different fields. However, although researchers acknowledged long
ago the necessity of epistemic operators in the language of ASP for better introspective reasoning,
this research venue did not attract much attention until recently. Moreover, the existing epistemic
extensions of ASP in the literature are not widely approved either, due to the fact that some propose
unintended results even for some simple acyclic epistemic programs, new unexpected results may
possibly be found, and more importantly, researchers have different reasonings for some critical
programs. To that end, Cabalar et al. have recently identified some structural properties of epistemic
programs to formally support a possible semantics proposal of such programs and standardise their
results. Nonetheless, the soundness of these properties is still under debate, and they are not
widely accepted either by the ASP community. Thus, it seems that there is still time to really understand
the paradigm, have a mature formalism, and determine the principles providing formal justification
of their understandable models. In this paper, we mainly focus on the existing semantics approaches,
the criteria that a satisfactory semantics is supposed to satisfy, and the ways to improve them.
We also extend some well-known propositions of here-and-there logic (HT) into epistemic HT so as
to reveal the real behaviour of programs. Finally, we propose a slightly novel semantics for epistemic
ASP, which can be considered as a reflexive extension of Cabalar et al.'s recent formalism called
autoepistemic ASP. 