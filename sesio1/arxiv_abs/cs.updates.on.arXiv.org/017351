Software model checking is a verification technique which is widely used for checking temporal
properties of software systems. Even though it is a property verification technique, its common
usage in practice is in "bug finding", that is, finding violations of temporal properties. Motivated
by this observation and leveraging the recent progress in fuzzing, we build a greybox fuzzing framework
to find violations of Linear-time Temporal Logic (LTL) properties. Our framework takes as input
a sequential program written in C/C++, and an LTL property. It finds violations, or counterexample
traces, of the LTL property in stateful software systems; however, it does not achieve verification.
Our work substantially extends directed greybox fuzzing to witness arbitrarily complex event
orderings. We note that existing directed greybox fuzzing approaches are limited to witnessing
reaching a location or witnessing simple event orderings like use-after-free. At the same time,
compared to model checkers, our approach finds the counterexamples faster, thereby finding more
counterexamples within a given time budget. Our LTL-Fuzzer tool, built on top of the AFL fuzzer,
is shown to be effective in detecting bugs in well-known protocol implementations, such as OpenSSL
and Telnet. We use LTL-Fuzzer to reproduce known vulnerabilities (CVEs), to find 15 zero-day bugs
by checking properties extracted from RFCs (for which 12 CVEs have been assigned), and to find violations
of both safety as well as liveness properties in real-world protocol implementations. Our work
represents a practical advance over software model checkers -- while simultaneously representing
a conceptual advance over existing greybox fuzzers. Our work thus provides a starting point for
understanding the unexplored synergies between software model checking and greybox fuzzing.
